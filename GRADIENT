import numpy as np
import pandas as pd
from sklearn.datasets import load_iris, load_boston
from sklearn.model_selection import train_test_split
from sklearn.ensemble import GradientBoostingClassifier, GradientBoostingRegressor
from sklearn.metrics import accuracy_score, mean_squared_error

# Classification using Gradient Boosting
# Load the Iris dataset (classification)
iris = load_iris()
X_clf, y_clf = iris.data, iris.target

# Split the data into training and testing sets
X_clf_train, X_clf_test, y_clf_train, y_clf_test = train_test_split(X_clf, y_clf, test_size=0.2, random_state=42)

# Create the Gradient Boosting Classifier
clf = GradientBoostingClassifier(n_estimators=100, learning_rate=0.1, random_state=42)

# Train the classifier
clf.fit(X_clf_train, y_clf_train)

# Make predictions on the test set
y_clf_pred = clf.predict(X_clf_test)

# Calculate accuracy for classification
clf_accuracy = accuracy_score(y_clf_test, y_clf_pred)
print("Classification Accuracy:", clf_accuracy)

# Regression using Gradient Boosting
# Load the Boston Housing dataset (regression)
boston = load_boston()
X_reg, y_reg = boston.data, boston.target

# Split the data into training and testing sets
X_reg_train, X_reg_test, y_reg_train, y_reg_test = train_test_split(X_reg, y_reg, test_size=0.2, random_state=42)

# Create the Gradient Boosting Regressor
reg = GradientBoostingRegressor(n_estimators=100, learning_rate=0.1, random_state=42)

# Train the regressor
reg.fit(X_reg_train, y_reg_train)

# Make predictions on the test set
y_reg_pred = reg.predict(X_reg_test)

# Calculate mean squared error for regression
reg_mse = mean_squared_error(y_reg_test, y_reg_pred)
print("Regression Mean Squared Error:", reg_mse)
