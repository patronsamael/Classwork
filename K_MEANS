pip install numpy pandas scikit-learn matplotlib
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.datasets import make_blobs
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
from sklearn.metrics import silhouette_score
from sklearn.preprocessing import StandardScaler
from gap_statistic import OptimalK

# Generate sample data for clustering (replace this with your own dataset)
data, true_labels = make_blobs(n_samples=300, centers=3, random_state=42)

# Standardize the data
scaler = StandardScaler()
data_std = scaler.fit_transform(data)

# Function to find the optimal K using the elbow method
def find_optimal_k_elbow(data, max_k):
    distortions = []
    for k in range(1, max_k + 1):
        kmeans = KMeans(n_clusters=k, random_state=42)
        kmeans.fit(data)
        distortions.append(kmeans.inertia_)
    return distortions

# Function to find the optimal K using the silhouette method
def find_optimal_k_silhouette(data, max_k):
    silhouette_scores = []
    for k in range(2, max_k + 1):
        kmeans = KMeans(n_clusters=k, random_state=42)
        kmeans.fit(data)
        silhouette_scores.append(silhouette_score(data, kmeans.labels_))
    return silhouette_scores

# Function to find the optimal K using the gap statistic
def find_optimal_k_gap(data, max_k):
    gaps = OptimalK(parallel_backend='joblib')
    results = gaps(X=data, cluster_array=np.arange(1, max_k + 1))
    return results.gap_value.argmax() + 1

# Visualize the elbow method, silhouette method, and gap statistic
def visualize_k_selection(elbow_distortions, silhouette_scores, gap_values):
    k_range = range(1, len(elbow_distortions) + 1)
    plt.figure(figsize=(12, 6))
    
    plt.subplot(1, 3, 1)
    plt.plot(k_range, elbow_distortions, marker='o')
    plt.xlabel('Number of Clusters (K)')
    plt.ylabel('Distortion')
    plt.title('Elbow Method')
    
    plt.subplot(1, 3, 2)
    plt.plot(k_range[1:], silhouette_scores, marker='o')
    plt.xlabel('Number of Clusters (K)')
    plt.ylabel('Silhouette Score')
    plt.title('Silhouette Method')
    
    plt.subplot(1, 3, 3)
    plt.plot(k_range, gap_values, marker='o')
    plt.xlabel('Number of Clusters (K)')
    plt.ylabel('Gap Value')
    plt.title('Gap Statistic')
    
    plt.tight_layout()
    plt.show()

# Find the optimal K using different methods
max_k = 10
elbow_distortions = find_optimal_k_elbow(data_std, max_k)
silhouette_scores = find_optimal_k_silhouette(data_std, max_k)
gap_k = find_optimal_k_gap(data_std, max_k)

# Visualize the results
visualize_k_selection(elbow_distortions, silhouette_scores, gap_k)

# Perform K-means clustering with the optimal K
optimal_kmeans = KMeans(n_clusters=gap_k, random_state=42)
predicted_labels = optimal_kmeans.fit_predict(data_std)

# Visualize the clusters using PCA
pca = PCA(n_components=2)
data_pca = pca.fit_transform(data_std)

plt.figure(figsize=(8, 6))
plt.scatter(data_pca[:, 0], data_pca[:, 1], c=predicted_labels, cmap='rainbow', edgecolors='k')
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.title('K-means Clustering with PCA')
plt.show()
